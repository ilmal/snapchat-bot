# Project Context
Generated on: 2025-05-22 11:55:05

Project Name: snapchat-bot


## Project File Structure

│   ├── Dockerfile-vnc
│   ├── README.md
│   ├── build.sh
│   ├── docker-compose.yaml
│   ├── llm_grab.py
│   ├── requirements.txt
│   ├── run.sh
├── driver_user/
├── src/
│   ├── main.py
│   ├── posts.csv
  ├── modules/
  │   ├── get_driver.py
  │   ├── get_element.py
    ├── snapchat/
    │   ├── snapchat_listener.py
    │   ├── snapchat_send.py
    │   ├── snapchat_web.py
    │   ├── story_pusher.py

## File Contents


### Dockerfile-vnc

```text

# Use an official Python runtime as the base image
FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install system dependencies and Google Chrome
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    xvfb \
    x11vnc \
    novnc \
    websockify \
    && wget -q -O chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
    && dpkg -i chrome.deb || apt-get install -f -y \
    && rm -f chrome.deb \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the project files
COPY . .

# Set environment variables
ENV DISPLAY=:99

# Expose VNC ports
EXPOSE 5900
EXPOSE 6080

# Start Xvfb, VNC server (logs suppressed), noVNC, and run Python unbuffered
CMD ["bash", "-c", "Xvfb :99 -screen 0 1920x1080x24 -ac & sleep 10 && x11vnc -display :99 -forever -nopw -shared > /dev/null 2>&1 & websockify --web /usr/share/novnc 6080 localhost:5900 & python3 -u src/main.py"]

```

### README.md

```text

# snapchat-bot
code go brrrr



### general wisdom

**SOURCES**

- https://www.dynamsoft.com/codepool/virtual-camera-static-images-video.html
- https://pypi.org/project/pyvirtualcam/ 


**virtual camera**

- sudo modprobe v4l2loopback card_label="My Fake Webcam" exclusive_caps=1
- sudo modprobe --remove v4l2loopback


```

### build.sh

```text

docker build -f Dockerfile-vnc -t snapchat-bot-vnc .
docker run --rm -v $(pwd)/driver_user:/app/driver_user -p 6080:6080 snapchat-bot-vnc

```

### docker-compose.yaml

```yaml

version: '3.8'

services:
  snapchat-bot:
    build:
      context: .
      dockerfile: Dockerfile-vnc
    image: snapchat-bot-vnc
    ports:
      - "6080:6080"  # noVNC web interface
      - "5900:5900"  # VNC server
    volumes:
      - ./driver_user:/app/driver_user  # Persist Chrome profile
    environment:
      - DISPLAY=:99
      - PYTHONUNBUFFERED=1  # Ensure Python output is unbuffered
    shm_size: 4g  # Shared memory for stability
    container_name: snapchat-bot-vnc

```

### llm_grab.py

```python

import os
import datetime
from pathlib import Path

def collect_project_info(root_dir, output_file="project_context.txt"):
    """
    Traverses a project directory, collects file structure and contents of relevant files,
    and saves them to an output file for LLM context.
    
    Args:
        root_dir (str): Root directory of the project
        output_file (str): Name of the output file to save the context
    """
    # Define relevant file extensions
    relevant_extensions = ('.py', '.txt', '.md', '.gitignore', '.yml', '.yaml', '.json')
    docker_files = ['Dockerfile', 'docker-compose.yml', 'docker-compose.yaml']

    
    # Initialize content to write
    output_content = []
    
    # Add header with timestamp
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    output_content.append(f"# Project Context\nGenerated on: {timestamp}\n")
    
    # Get project root name
    project_name = os.path.basename(os.path.abspath(root_dir))
    output_content.append(f"Project Name: {project_name}\n")
    
    # Collect file tree
    output_content.append("\n## Project File Structure\n")
    for root, dirs, files in sorted(os.walk(root_dir)):
        # Skip virtual environment and cache directories
        if any(ignore_dir in root for ignore_dir in ['venv', '.venv', '__pycache__', '.git']):
            continue
            
        # Calculate relative path and depth for tree visualization
        rel_path = os.path.relpath(root, root_dir)
        depth = rel_path.count(os.sep) if rel_path != '.' else 0
        indent = '  ' * depth
        
        # Add directory to tree
        if rel_path != '.':
            output_content.append(f"{indent}├── {os.path.basename(root)}/")
        
        # Add files in this directory
        for file in sorted(files):
            if any(ignore_dir in file for ignore_dir in ['.pyc', '.log']):
                continue
            output_content.append(f"{indent}│   ├── {file}")
    
    # Collect file contents
    output_content.append("\n## File Contents\n")
    
    for root, _, files in sorted(os.walk(root_dir)):
        # Skip ignored directories
        if any(ignore_dir in root for ignore_dir in ['venv', '.venv', '__pycache__', '.git']):
            continue
            
        for file in sorted(files):
            file_path = os.path.join(root, file)
            rel_path = os.path.relpath(file_path, root_dir)
            
            # Process only relevant files, including Docker-related files
            if not (file.endswith(relevant_extensions) or not file in docker_files):
                continue


                
            if any(ignore_dir in file for ignore_dir in ['.pyc', '.log']):
                continue
                
            output_content.append(f"\n### {rel_path}\n")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    output_content.append("```" + 
                        (file.endswith('.py') and 'python' or 
                         file.endswith(('.yml', '.yaml')) and 'yaml' or 
                         file.endswith('.json') and 'json' or 
                         'text') + "\n")
                    output_content.append(content)
                    output_content.append("\n```")
            except Exception as e:
                output_content.append(f"Error reading file: {str(e)}\n")
    
    # Write to output file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output_content))
        print(f"Project context saved to {output_file}")
    except Exception as e:
        print(f"Error writing output file: {str(e)}")

if __name__ == "__main__":
    # Use current directory as default, or specify your project directory
    project_directory = "."  # Change this to your project directory if needed
    collect_project_info(project_directory)

```

### requirements.txt

```text

selenium==4.25.0
webdriver-manager==4.0.2

```

### run.sh

```text

#!/bin/bash

# Check if Xvfb is installed, install if not (run only once, requires sudo)
if ! command -v Xvfb &> /dev/null; then
    echo "Installing Xvfb..."
    sudo apt-get update
    sudo apt-get install -y xvfb
fi

# Check if google-chrome is installed
if ! command -v google-chrome &> /dev/null; then
    echo "Installing Google Chrome..."
    sudo apt-get update
    sudo apt-get install -y google-chrome-stable
fi

# Set display to :99 to avoid conflicts with :0
export DISPLAY=:99

# Check if Xvfb is already running on :99 and clean up if necessary
if [ -f /tmp/.X99-lock ]; then
    echo "Cleaning up existing Xvfb lock file..."
    rm -f /tmp/.X99-lock
    killall Xvfb 2> /dev/null
fi

# Start Xvfb in the background
echo "Starting Xvfb on display :99..."
Xvfb :99 -screen 0 1024x768x24 &

# Wait briefly to ensure Xvfb starts
sleep 3

# Activate the virtual environment (corrected path to .venv)
echo "Activating virtual environment..."
source .venv/bin/activate

# Ensure webdriver-manager and selenium are up-to-date
echo "Updating dependencies..."
pip install --upgrade webdriver-manager selenium

# Run the Python script
echo "Running Snapchat bot..."
python3 src/main.py

```

### src/main.py

```python

import os
import time

from modules.snapchat.snapchat_send import send_snapchat
from modules.snapchat.story_pusher import post_story
from modules.get_driver import get_driver
from modules.snapchat.snapchat_listener import snap_listener


def main(driver):
    # listen for new messages
    chat_user, chat_message = snap_listener(driver)

    if chat_message == "beep" or chat_message == "Beep":
        print("He said beep!")
        send_snapchat(driver, chat_user, "boop")
        return

    if chat_message:
        print("he said something!", chat_message)
        send_snapchat(driver, chat_user, "Ah, I see, did you mean this?", True)
        #send_snapchat(driver, chat_user, [answers(chat_message), random_explanations()])


def init():
    # define driver and open page
    driver = get_driver()
    #post_story()
    counter = 0
    while True:
        counter += 1
        main(driver)
        time.sleep(.5)

        if counter >= 4320:
            counter = 0
            post_story()



if __name__ == "__main__":
    init()

```

### src/posts.csv

```text

,post_url
0,https://www.sweclockers.com/marknad/223720-antec-isk-300-150
1,https://www.sweclockers.com/marknad/226532-diverse-sma-ddr2-pc3-bortskankes
2,https://www.sweclockers.com/marknad/227511-ibm-zbc12-stordator-bortskankes-till-nytt-bra-hem
3,https://www.sweclockers.com/marknad/227422-bordstelefoner-foretag-mx-one
4,https://www.sweclockers.com/marknad/226904-gamla-skarmar-skankes


```

### src/modules/get_driver.py

```python

import os
import time
import shutil
from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys

def get_driver():
    print("Starting client...")
    base_url = "https://web.snapchat.com/"
    dirname = os.path.dirname(__file__)
    unique_id = str(int(time.time()))
    driver_user_path = os.path.join(dirname, "../driver_user", unique_id)

    try:
        os.makedirs(driver_user_path, exist_ok=True)
        os.chmod(driver_user_path, 0o777)
    except Exception as e:
        print(f"Failed to create user data directory {driver_user_path}: {e}")
        return None

    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1920,1080")  # Updated to 1920x1080
    # options.add_argument("--headless=new")  # Disabled for VNC
    options.add_argument("--disable-gpu")
    options.add_argument('--start-maximized')
    options.add_argument('--no-sandbox')
    options.add_argument(f'--user-data-dir={driver_user_path}')
    options.add_argument("user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_argument("--disable-dev-shm-usage")

    service = Service(ChromeDriverManager().install(), log_path="/app/chromedriver.log")
    try:
        driver = webdriver.Chrome(service=service, options=options)
    except Exception as e:
        print(f"Failed to start Chrome: {e}")
        return None

    driver.set_page_load_timeout(30)

    try:
        driver.get(base_url)
        print(f"Successfully loaded {base_url}")
    except Exception as e:
        print(f"Failed to load {base_url}: {e}")
        driver.quit()
        return None

    return driver

```

### src/modules/get_element.py

```python

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

def get_element(driver, input, search_type="XPATH", timeout=20):
    try:
        print(f"Searching for element: {input} using {search_type}")
        if search_type == "XPATH":
            return WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.XPATH, str(input)))
            )
        if search_type == "CLASS_NAME":
            return WebDriverWait(driver, timeout).until(
                EC.visibility_of_all_elements_located((By.CLASS_NAME, str(input)))
            )
    except TimeoutException:
        print(f"Timeout waiting for element {input} after {timeout} seconds")
        return None
    except WebDriverException as e:
        print(f"WebDriver error while searching for {input}: {e}")
        return None

```

### src/modules/snapchat/snapchat_listener.py

```python

import time
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys

from modules.get_element import get_element

def check_for_messages(driver):
    user_bodys = get_element(driver, "O4POs", "CLASS_NAME")

    print(user_bodys)

    if not user_bodys:
        return None

    for index, user_body in enumerate(user_bodys):
        name = user_body.find_element(By.XPATH, "./div[2]/span").text
        message = user_body.find_element(By.XPATH, "./div[2]/div").text

        if "New Chat" in message:
            print(name)
            return [name, user_bodys[index]]

def read_messages(driver, element):
    element.click()
    ActionChains(driver).send_keys(Keys.CONTROL + "R")
    time.sleep(.5)

    chats = driver.find_elements(By.CLASS_NAME, "T1yt2")
    
    latest_chat = chats[-1].text.split("\n")[-1]

    # return to main page:
    button = get_element(driver, "/html/body/main/div[1]/div[2]/div/div/div/div[1]/div[1]/button")
    button.click()

    return latest_chat


def snap_listener(driver):

    if not driver:
        print("Driver is None")
        return False, False

    new_messages = check_for_messages(driver) # returns [user, element]
    if new_messages:
        latest_chat = read_messages(driver, new_messages[1])

        print("RETURNNIG: ", new_messages[0], latest_chat)

        return new_messages[0], latest_chat
    
    print("No new messages")
    return False, False 
            

if __name__ == "__main__":
    snap_listener()

```

### src/modules/snapchat/snapchat_send.py

```python

import os 
import time
import random

from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys

from modules.get_element import get_element

def send_snapchat(driver, user, message, meme=False):

    def select_user(user):
        users_name_elem = get_element(driver, "FiLwP", "CLASS_NAME")

        for e in users_name_elem:
            print(e.text)
            if e.text == user:
                if users_name_elem[-1].text == user:
                    return
                ActionChains(driver)\
                    .click(e)\
                    .perform()
                return
        raise Exception(f"THE USER: {user} WASN'T FOUD, CRITICAL")
        
    def send_message(message):
        text_box = get_element(driver, "/html/body/main/div[1]/div[2]/div/div/div/div[2]/div[2]/div/div/div/div")
        ActionChains(driver)\
            .click(text_box)\
            .perform()
        
        text_box.send_keys(message)

        ActionChains(driver)\
            .send_keys(Keys.ENTER)\
            .perform()
        
        if meme:
            meme_path = os.getcwd()+"/src/images/memes/"
            meme_image = meme_path + str(random.choice(os.listdir(meme_path)))

            input_box = get_element(driver, "/html/body/main/div[1]/div[2]/div/div/div/div[2]/div[2]/div/button/input")
            input_box.send_keys(meme_image)
            time.sleep(1)
            ActionChains(driver).send_keys(Keys.ENTER).perform()

    select_user(user)

    if isinstance(message, list):
        for e in message:
            send_message(e)
    else:
        send_message(message)

    # return to main page:
    button = get_element(driver, "/html/body/main/div[1]/div[2]/div/div/div/div[1]/div[1]/button")
    button.click()

    return

```

### src/modules/snapchat/snapchat_web.py

```python

import os
from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys

def get_element(driver, input, search_type="XPATH"):
    try:
        DELAY = 60
        if search_type == "XPATH":
            return WebDriverWait(driver, DELAY).until(EC.presence_of_element_located(
                (By.XPATH, str(input))))
        if search_type == "CLASS_NAME":
            return WebDriverWait(driver, DELAY).until(EC.visibility_of_all_elements_located(
                (By.CLASS_NAME, str(input))))
    except TimeoutException:
        print("Loading took too much time!")
        driver.quit()

def get_driver():

    print("sending snap")

    base_url = "https://web.snapchat.com/"

    dirname = os.path.dirname(__file__)
    driver_user_path = dirname.replace("modules", "driver_user")

    """
    
Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36

    """

    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--headless=new")
    options.add_argument("--disable-gpu")
    options.add_argument('--start-maximized')
    options.add_argument('--no-sandbox')
    options.add_argument("user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36")
    options.add_argument(str('--user-data-dir=' + driver_user_path)) # use a custom profile


    driver = webdriver.Chrome(executable_path=ChromeDriverManager().install(), options=options)

    driver.get(base_url)

    return driver

def send_snapchat(user, message):
    driver = get_driver()

    def select_user(user):
        users_name_elem = get_element(driver, "FiLwP", "CLASS_NAME")

        for e in users_name_elem:
            print(e.text)
            if e.text == user:
                ActionChains(driver)\
                    .click(e)\
                    .perform()
                return
        raise Exception(f"THE USER: {user} WASN'T FOUD, CRITICAL")
        
    def send_message(message):
        text_box = get_element(driver, "/html/body/main/div[1]/div[2]/div/div/div/div[2]/div[2]/div/div/div/div")
        ActionChains(driver)\
            .click(text_box)\
            .perform()
        
        ActionChains(driver)\
            .send_keys(message)\
            .send_keys(Keys.ENTER)\
            .perform()

    select_user(user)

    if isinstance(message, list):
        for e in message:
            send_message(e)
    else:
        send_message(e)

    driver.quit()

if __name__ == "__main__":
    get_driver()

```

### src/modules/snapchat/story_pusher.py

```python

import os
import time
from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys

def get_element(driver, input, search_type="XPATH"):
    try:
        DELAY = 60
        if search_type == "XPATH":
            return WebDriverWait(driver, DELAY).until(EC.presence_of_element_located(
                (By.XPATH, str(input))))
        if search_type == "CLASS_NAME":
            return WebDriverWait(driver, DELAY).until(EC.visibility_of_all_elements_located(
                (By.CLASS_NAME, str(input))))
    except TimeoutException:
        print("Loading took too much time!")
        driver.quit()

def get_driver():

    print("sending snap")

    base_url = "https://my.snapchat.com/"

    dirname = os.path.dirname(__file__)
    driver_user_path = dirname.replace("modules", "driver_user")

    """
    
Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36

    """

    options = webdriver.ChromeOptions()
    #options.add_argument("--window-size=1920,1080")
    #options.add_argument("--headless=new")
    #options.add_argument("--disable-gpu")
    #options.add_argument('--start-maximized')
    options.add_argument('--no-sandbox')
    #options.add_argument("user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36")
    options.add_argument(str('--user-data-dir=' + driver_user_path)) # use a custom profile


    driver = webdriver.Chrome(executable_path=ChromeDriverManager().install(), options=options)

    driver.get(base_url)

    return driver

def post_story():
    driver = get_driver()

    #Press login
    button = get_element(driver, "/html/body/div/main/div[2]/div[2]/div[2]/div/div[2]/div/div/button")
    button.click()

    # video drop in
    time.sleep(1)
    input  = get_element(driver, "/html/body/div/main/div[2]/div[2]/div[1]/div/div/input")
    input.send_keys(os.getcwd()+"/src/images/story_image.jpg")

    # select public story
    button = get_element(driver, "/html/body/div/main/div[2]/div[2]/div[2]/div[5]/div[2]/div/div/div[2]/div/div/div/div[2]/div/button")
    button.click()

    # send story
    time.sleep(1)
    button = get_element(driver, "/html/body/div/main/div[2]/div[2]/div[2]/div[6]/div/div[2]/div/div[2]/div/button")
    ActionChains(driver).move_to_element(button).perform()
    button.click()

    driver.quit()

if __name__ == "__main__":
    post_story()

```